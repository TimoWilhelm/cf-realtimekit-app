// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { FetchAllLivestreamsData, FetchAllLivestreamsResponses, PostLivestreamsData, PostLivestreamsResponses, StopLivestreamingData, StopLivestreamingResponses, LivestreamSessionDetailsData, LivestreamSessionDetailsResponses, StartLivestreamingData, StartLivestreamingResponses, ResetStreamKeyData, ResetStreamKeyResponses, GetLivestreamAnalyticsCompleteData, GetLivestreamAnalyticsCompleteResponses, GetLivestreamAnalyticsDaywiseData, GetLivestreamAnalyticsDaywiseResponses, GetOrgAnalyticsData, GetOrgAnalyticsResponses, EnableLivestreamData, EnableLivestreamResponses, DisableLivestreamData, DisableLivestreamResponses, GetV2LivestreamsessionSessionMeetingIdActiveLivestreamData, GetV2LivestreamsessionSessionMeetingIdActiveLivestreamResponses, GetV2MeetingsMeetingIdActiveLivestreamData, GetV2MeetingsMeetingIdActiveLivestreamResponses, GetV2LivestreamsLivestreamSessionIdData, GetV2LivestreamsLivestreamSessionIdResponses, GetV2ActiveLivestreamSessionDetailsData, GetV2ActiveLivestreamSessionDetailsResponses, GetV2LivestreamSessionLivestreamIdData, GetV2LivestreamSessionLivestreamIdResponses, GetActiveSessionData, GetActiveSessionResponses, GetActiveSessionErrors, KickPartcipantsData, KickPartcipantsResponses, KickPartcipantsErrors, KickAllParticipantsData, KickAllParticipantsResponses, MuteParticipantsData, MuteParticipantsResponses, MuteAllParticipantsData, MuteAllParticipantsResponses, CreatePollData, CreatePollResponses, CreatePollErrors, GetSessionsData, GetSessionsResponses, GetSessionDetailsData, GetSessionDetailsResponses, GetSessionParticipantsData, GetSessionParticipantsResponses, GetParticipantDetailsData, GetParticipantDetailsResponses, GetSessionChatData, GetSessionChatResponses, GetSessionTranscriptData, GetSessionTranscriptResponses, GetSessionSummaryData, GetSessionSummaryResponses, PostSessionsSessionIdSummaryData, PostSessionsSessionIdSummaryResponses, GetAllWebhooksData, GetAllWebhooksResponses, GetAllWebhooksErrors, AddWebhookData, AddWebhookResponses, AddWebhookErrors, DeleteWebhookData, DeleteWebhookResponses, DeleteWebhookErrors, GetWebhookData, GetWebhookResponses, GetWebhookErrors, EditWebhookData, EditWebhookResponses, EditWebhookErrors, ReplaceWebhookData, ReplaceWebhookResponses, ReplaceWebhookErrors, GetAllOrgsData, GetAllOrgsResponses, GetAllOrgsErrors, CreateOrgData, CreateOrgResponses, CreateOrgErrors, GetOrgData, GetOrgResponses, GetOrgErrors, EditOrgData, EditOrgResponses, EditOrgErrors, GetAllMeetingsData, GetAllMeetingsResponses, CreateMeetingData, CreateMeetingResponses, GetMeetingData, GetMeetingResponses, GetMeetingErrors, UpdateMeetingData, UpdateMeetingResponses, UpdateMeetingErrors, ReplaceMeetingData, ReplaceMeetingResponses, GetMeetingParticipantsData, GetMeetingParticipantsResponses, GetMeetingParticipantsErrors, AddParticipantData, AddParticipantResponses, AddParticipantErrors, DeleteMeetingParticipantData, DeleteMeetingParticipantResponses, DeleteMeetingParticipantErrors, GetMeetingParticipantData, GetMeetingParticipantResponses, GetMeetingParticipantErrors, EditParticipantData, EditParticipantResponses, EditParticipantErrors, RegenerateTokenData, RegenerateTokenResponses, RegenerateTokenErrors, GetAllRecordingsData, GetAllRecordingsResponses, StartRecordingData, StartRecordingResponses, GetActiveRecordingData, GetActiveRecordingResponses, GetActiveRecordingErrors, GetOneRecordingData, GetOneRecordingResponses, PauseResumeStopRecordingData, PauseResumeStopRecordingResponses, GetPresetsData, GetPresetsResponses, PostPresetsData, PostPresetsResponses, DeletePresetsPresetIdData, DeletePresetsPresetIdResponses, GetPresetsPresetIdData, GetPresetsPresetIdResponses, PatchPresetsPresetIdData, PatchPresetsPresetIdResponses, GetParticipantDataFromPeerIdData, GetParticipantDataFromPeerIdResponses, StartTrackRecordingForAMeetingData, StartTrackRecordingForAMeetingResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Fetch all livestreams
 * Returns details of livestreams associated with the given organization ID. It includes livestreams created by your organization and RealtimeKit meetings that are livestreamed by your organization. If you only want details of livestreams created by your organization and not RealtimeKit meetings, you can use the `exclude_meetings` query parameter.
 */
export const fetchAllLivestreams = <ThrowOnError extends boolean = false>(options?: Options<FetchAllLivestreamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FetchAllLivestreamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams',
        ...options
    });
};

/**
 * Create an independent livestream
 * Creates a livestream for the given organization ID and returns ingest server, stream key, and playback URL. You can pass custom input to the ingest server and stream key, and freely distribute the content using the playback URL on any player that supports HLS/LHLS.
 */
export const postLivestreams = <ThrowOnError extends boolean = false>(options?: Options<PostLivestreamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLivestreamsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Stop livestreaming a meeting
 * Stops the active livestream of a meeting associated with the given meeting ID. Retreive the meeting ID using the `Create a meeting` API.
 */
export const stopLivestreaming = <ThrowOnError extends boolean = false>(options: Options<StopLivestreamingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StopLivestreamingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-livestream/stop',
        ...options
    });
};

/**
 * Fetch livestream session details for a meeting
 * Returns livestream session details for the given meeting ID. Retreive the meeting ID using the `Create a meeting` API.
 */
export const livestreamSessionDetails = <ThrowOnError extends boolean = false>(options: Options<LivestreamSessionDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LivestreamSessionDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/livestream',
        ...options
    });
};

/**
 * Start livestreaming a meeting
 * Starts livestream of a meeting associated with the given meeting ID. Retreive the meeting ID using the `Create a meeting` API.
 */
export const startLivestreaming = <ThrowOnError extends boolean = false>(options: Options<StartLivestreamingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartLivestreamingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/livestreams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset a livestream's stream key
 * Resets the stream key for the given livestream ID. Retreive the livestream ID using the `Start livestreaming a meeting` API.
 */
export const resetStreamKey = <ThrowOnError extends boolean = false>(options: Options<ResetStreamKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetStreamKeyResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams/{livestream_id}/reset-stream-key',
        ...options
    });
};

/**
 * Fetch complete analytics data for your livestreams
 * Returns livestream analytics for the specified time range.
 */
export const getLivestreamAnalyticsComplete = <ThrowOnError extends boolean = false>(options?: Options<GetLivestreamAnalyticsCompleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLivestreamAnalyticsCompleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/analytics/livestreams/overall',
        ...options
    });
};

/**
 * Fetch day-wise analytics data for your livestreams
 * Returns day-wise livestream analytics data for the specified time range.
 */
export const getLivestreamAnalyticsDaywise = <ThrowOnError extends boolean = false>(options?: Options<GetLivestreamAnalyticsDaywiseData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLivestreamAnalyticsDaywiseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/analytics/livestreams/daywise',
        ...options
    });
};

/**
 * Fetch day-wise session and recording analytics data for an organization
 * Returns day-wise session and recording analytics data of an organization for the specified time range start_date to end_date. If start_date and end_date are not provided, the default time range is set from 30 days ago to the current date.
 */
export const getOrgAnalytics = <ThrowOnError extends boolean = false>(options?: Options<GetOrgAnalyticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOrgAnalyticsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/analytics/daywise',
        ...options
    });
};

/**
 * Enable a livestream
 * Enables a livestream for the given livestream ID. Retreive the livestream ID using the `Start livestreaming a meeting` API.
 */
export const enableLivestream = <ThrowOnError extends boolean = false>(options: Options<EnableLivestreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EnableLivestreamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams/{livestream_id}/enable',
        ...options
    });
};

/**
 * Disable a livestream
 * Disables a livestream for the given livestream ID. Retreive the livestream ID using the `Start livestreaming a meeting` API.
 */
export const disableLivestream = <ThrowOnError extends boolean = false>(options: Options<DisableLivestreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<DisableLivestreamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams/{livestream_id}/disable',
        ...options
    });
};

/**
 * Fetch livestream session details using a session ID
 * Returns livestream session details for the given session ID. Retreive the session ID using the `Fetch all sessions of an organization` API.
 */
export const getV2LivestreamsessionSessionMeetingIdActiveLivestream = <ThrowOnError extends boolean = false>(options: Options<GetV2LivestreamsessionSessionMeetingIdActiveLivestreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2LivestreamsessionSessionMeetingIdActiveLivestreamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/livestream-sessions',
        ...options
    });
};

/**
 * Fetch active livestreams for a meeting
 * Returns details of all active livestreams for the given meeting ID.
 */
export const getV2MeetingsMeetingIdActiveLivestream = <ThrowOnError extends boolean = false>(options: Options<GetV2MeetingsMeetingIdActiveLivestreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2MeetingsMeetingIdActiveLivestreamResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-livestream',
        ...options
    });
};

/**
 * Fetch livestream session details using livestream session ID
 * Returns livestream session details for the given livestream session ID. Retrieve the `livestream_session_id`using the `Fetch livestream session details using a session ID` API.
 */
export const getV2LivestreamsLivestreamSessionId = <ThrowOnError extends boolean = false>(options: Options<GetV2LivestreamsLivestreamSessionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2LivestreamsLivestreamSessionIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams/sessions/{livestream-session-id}',
        ...options
    });
};

/**
 * Fetch active livestream session details
 * Returns details of all active livestreams for the given livestream ID. Retreive the livestream ID using the `Start livestreaming a meeting` API.
 */
export const getV2ActiveLivestreamSessionDetails = <ThrowOnError extends boolean = false>(options: Options<GetV2ActiveLivestreamSessionDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2ActiveLivestreamSessionDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams/{livestream_id}/active-livestream-session',
        ...options
    });
};

/**
 * Fetch livestream details using livestream ID
 * Returns details of a livestream with sessions for the given livestream ID. Retreive the livestream ID using the `Start livestreaming a meeting` API.
 */
export const getV2LivestreamSessionLivestreamId = <ThrowOnError extends boolean = false>(options: Options<GetV2LivestreamSessionLivestreamIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetV2LivestreamSessionLivestreamIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/livestreams/{livestream_id}',
        ...options
    });
};

/**
 * Fetch details of an active session
 * Returns details of an ongoing active session for the given meeting ID.
 */
export const getActiveSession = <ThrowOnError extends boolean = false>(options: Options<GetActiveSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActiveSessionResponses, GetActiveSessionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-session',
        ...options
    });
};

/**
 * Kick participants from an active session
 * Kicks one or more participants from an active session using user ID or custom participant ID.
 */
export const kickPartcipants = <ThrowOnError extends boolean = false>(options: Options<KickPartcipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KickPartcipantsResponses, KickPartcipantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-session/kick',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Kick all participants
 * Kicks all participants from an active session for the given meeting ID.
 */
export const kickAllParticipants = <ThrowOnError extends boolean = false>(options: Options<KickAllParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<KickAllParticipantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-session/kick-all',
        ...options
    });
};

/**
 * Mute participants of an active session
 * Mutes one or more participants from an active session using user ID or custom participant ID.
 */
export const muteParticipants = <ThrowOnError extends boolean = false>(options: Options<MuteParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MuteParticipantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-session/mute',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Mute all participants
 * Mutes all participants of an active session for the given meeting ID.
 */
export const muteAllParticipants = <ThrowOnError extends boolean = false>(options: Options<MuteAllParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MuteAllParticipantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-session/mute-all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a poll
 * Creates a new poll in an active session for the given meeting ID.
 */
export const createPoll = <ThrowOnError extends boolean = false>(options: Options<CreatePollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePollResponses, CreatePollErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/active-session/poll',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all sessions of an organization
 * Returns details of all sessions of an organization.
 */
export const getSessions = <ThrowOnError extends boolean = false>(options?: Options<GetSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions',
        ...options
    });
};

/**
 * Fetch details of a session
 * Returns data of the given session ID including recording details.
 */
export const getSessionDetails = <ThrowOnError extends boolean = false>(options: Options<GetSessionDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}',
        ...options
    });
};

/**
 * Fetch participants list of a session
 * Returns a list of participants for the given session ID.
 */
export const getSessionParticipants = <ThrowOnError extends boolean = false>(options: Options<GetSessionParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionParticipantsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/participants',
        ...options
    });
};

/**
 * Fetch details of a participant
 * Returns details of the given participant ID along with call statistics for the given session ID.
 */
export const getParticipantDetails = <ThrowOnError extends boolean = false>(options: Options<GetParticipantDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetParticipantDetailsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/participants/{participant_id}',
        ...options
    });
};

/**
 * Fetch all chat messages of a session
 * Returns a URL to download all chat messages of the session ID in CSV format.
 *
 */
export const getSessionChat = <ThrowOnError extends boolean = false>(options: Options<GetSessionChatData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionChatResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/chat',
        ...options
    });
};

/**
 * Fetch the complete transcript for a session
 * Returns a URL to download the transcript for the session ID in CSV format.
 */
export const getSessionTranscript = <ThrowOnError extends boolean = false>(options: Options<GetSessionTranscriptData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionTranscriptResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/transcript',
        ...options
    });
};

/**
 * Fetch summary of transcripts for a session
 * Returns a Summary URL to download the Summary of Transcripts for the session ID as plain text.
 */
export const getSessionSummary = <ThrowOnError extends boolean = false>(options: Options<GetSessionSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSessionSummaryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/summary',
        ...options
    });
};

/**
 * Generate summary of Transcripts for the session
 * Trigger Summary generation of Transcripts for the session ID.
 */
export const postSessionsSessionIdSummary = <ThrowOnError extends boolean = false>(options: Options<PostSessionsSessionIdSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSessionsSessionIdSummaryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/{session_id}/summary',
        ...options
    });
};

/**
 * Fetch all webhooks details
 * Returns details of all webhooks for an organization.
 */
export const getAllWebhooks = <ThrowOnError extends boolean = false>(options?: Options<GetAllWebhooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllWebhooksResponses, GetAllWebhooksErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks',
        ...options
    });
};

/**
 * Add a webhook
 * Adds a new webhook to an organization.
 */
export const addWebhook = <ThrowOnError extends boolean = false>(options: Options<AddWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddWebhookResponses, AddWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a webhook
 * Removes a webhook for the given webhook ID.
 */
export const deleteWebhook = <ThrowOnError extends boolean = false>(options: Options<DeleteWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteWebhookResponses, DeleteWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhook_id}',
        ...options
    });
};

/**
 * Fetch details of a webhook
 * Returns webhook details for the given webhook ID.
 */
export const getWebhook = <ThrowOnError extends boolean = false>(options: Options<GetWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWebhookResponses, GetWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhook_id}',
        ...options
    });
};

/**
 * Edit a webhook
 * Edits the webhook details for the given webhook ID.
 */
export const editWebhook = <ThrowOnError extends boolean = false>(options: Options<EditWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditWebhookResponses, EditWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Replace a webhook
 * Replace all details for the given webhook ID.
 */
export const replaceWebhook = <ThrowOnError extends boolean = false>(options: Options<ReplaceWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReplaceWebhookResponses, ReplaceWebhookErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/webhooks/{webhook_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch organization details of all users
 * Returns organization details of all the users.
 */
export const getAllOrgs = <ThrowOnError extends boolean = false>(options?: Options<GetAllOrgsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllOrgsResponses, GetAllOrgsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/orgs',
        ...options
    });
};

/**
 * Create an organization
 * Creates an organization. The authenticated user becomes the owner of the organization.
 */
export const createOrg = <ThrowOnError extends boolean = false>(options: Options<CreateOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrgResponses, CreateOrgErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/orgs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch details of an organization
 * Returns organization details for the given organization ID. The user must be the organization's owner.
 */
export const getOrg = <ThrowOnError extends boolean = false>(options: Options<GetOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrgResponses, GetOrgErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/orgs/{org_id}',
        ...options
    });
};

/**
 * Edit details of an organization
 * Edits organization details for the given organization ID. The user must be the organization's owner.
 */
export const editOrg = <ThrowOnError extends boolean = false>(options: Options<EditOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditOrgResponses, EditOrgErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/orgs/{org_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all meetings for an organization
 * Returns all meetings for the given organization ID.
 */
export const getAllMeetings = <ThrowOnError extends boolean = false>(options?: Options<GetAllMeetingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllMeetingsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings',
        ...options
    });
};

/**
 * Create a meeting
 * Create a meeting for the given organization ID.
 */
export const createMeeting = <ThrowOnError extends boolean = false>(options?: Options<CreateMeetingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateMeetingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fetch a meeting for an organization
 * Returns a meeting details in an organization for the given meeting ID.
 */
export const getMeeting = <ThrowOnError extends boolean = false>(options: Options<GetMeetingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeetingResponses, GetMeetingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}',
        ...options
    });
};

/**
 * Update a meeting
 * Updates a meeting in an organization for the given meeting ID.
 */
export const updateMeeting = <ThrowOnError extends boolean = false>(options: Options<UpdateMeetingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateMeetingResponses, UpdateMeetingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Replace a meeting
 * Replaces all the details for the given meeting ID.
 */
export const replaceMeeting = <ThrowOnError extends boolean = false>(options: Options<ReplaceMeetingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReplaceMeetingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all participants of a meeting
 * Returns all participants detail for the given meeting ID.
 */
export const getMeetingParticipants = <ThrowOnError extends boolean = false>(options: Options<GetMeetingParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeetingParticipantsResponses, GetMeetingParticipantsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/participants',
        ...options
    });
};

/**
 * Add a participant
 * Adds a participant to the given meeting ID.
 */
export const addParticipant = <ThrowOnError extends boolean = false>(options: Options<AddParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddParticipantResponses, AddParticipantErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/participants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete a participant
 * Deletes a participant for the given meeting and participant ID.
 */
export const deleteMeetingParticipant = <ThrowOnError extends boolean = false>(options: Options<DeleteMeetingParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMeetingParticipantResponses, DeleteMeetingParticipantErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/participants/{participant_id}',
        ...options
    });
};

/**
 * Fetch a participant's detail
 * Returns a participant details for the given meeting and participant ID.
 */
export const getMeetingParticipant = <ThrowOnError extends boolean = false>(options: Options<GetMeetingParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMeetingParticipantResponses, GetMeetingParticipantErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/participants/{participant_id}',
        ...options
    });
};

/**
 * Edit a participant's detail
 * Updates a participant's details for the given meeting and participant ID.
 */
export const editParticipant = <ThrowOnError extends boolean = false>(options: Options<EditParticipantData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditParticipantResponses, EditParticipantErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/participants/{participant_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh participant's authentication token
 * Regenerates participant's authentication token for the given meeting and participant ID.
 */
export const regenerateToken = <ThrowOnError extends boolean = false>(options: Options<RegenerateTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegenerateTokenResponses, RegenerateTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/meetings/{meeting_id}/participants/{participant_id}/token',
        ...options
    });
};

/**
 * Fetch all recordings for an organization
 * Returns all recordings for an organization. If the `meeting_id` parameter is passed, returns all recordings for the given meeting ID.
 */
export const getAllRecordings = <ThrowOnError extends boolean = false>(options?: Options<GetAllRecordingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllRecordingsResponses, unknown, ThrowOnError>({
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recordings',
        ...options
    });
};

/**
 * Start recording a meeting
 * Starts recording a meeting. The meeting can be started by an organization admin directly, or a participant with permissions to start a recording, based on the type of authorization used.
 */
export const startRecording = <ThrowOnError extends boolean = false>(options?: Options<StartRecordingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartRecordingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recordings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Fetch active recording
 * Returns the active recording details for the given meeting ID.
 */
export const getActiveRecording = <ThrowOnError extends boolean = false>(options: Options<GetActiveRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActiveRecordingResponses, GetActiveRecordingErrors, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recordings/active-recording/{meeting_id}',
        ...options
    });
};

/**
 * Fetch details of a recording
 * Returns details of a recording for the given recording ID.
 */
export const getOneRecording = <ThrowOnError extends boolean = false>(options: Options<GetOneRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOneRecordingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/recordings/{recording_id}',
        ...options
    });
};

/**
 * Pause/Resume/Stop recording
 * Pause/Resume/Stop a given recording ID.
 */
export const pauseResumeStopRecording = <ThrowOnError extends boolean = false>(options: Options<PauseResumeStopRecordingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PauseResumeStopRecordingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/recordings/{recording_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch all presets
 * Fetches all the presets belonging to an organization.
 */
export const getPresets = <ThrowOnError extends boolean = false>(options?: Options<GetPresetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPresetsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/presets',
        ...options
    });
};

/**
 * Create a preset
 * Creates a preset belonging to the current organization
 */
export const postPresets = <ThrowOnError extends boolean = false>(options?: Options<PostPresetsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostPresetsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/presets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a preset
 * Deletes a preset using the provided preset ID
 */
export const deletePresetsPresetId = <ThrowOnError extends boolean = false>(options: Options<DeletePresetsPresetIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePresetsPresetIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/presets/{preset_id}',
        ...options
    });
};

/**
 * Fetch details of a preset
 * Fetches details of a preset using the provided preset ID
 */
export const getPresetsPresetId = <ThrowOnError extends boolean = false>(options: Options<GetPresetsPresetIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPresetsPresetIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/presets/{preset_id}',
        ...options
    });
};

/**
 * Update a preset
 * Update a preset by the provided preset ID
 */
export const patchPresetsPresetId = <ThrowOnError extends boolean = false>(options: Options<PatchPresetsPresetIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchPresetsPresetIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/presets/{preset_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Fetch details of peer
 * Returns details of the given peer ID along with call statistics for the given session ID.
 */
export const getParticipantDataFromPeerId = <ThrowOnError extends boolean = false>(options: Options<GetParticipantDataFromPeerIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetParticipantDataFromPeerIdResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/sessions/peer-report/{peer_id}',
        ...options
    });
};

/**
 * Starts a track recording in a meeting. Track recordings consist of "layers". Layers are used to map audio/video tracks in a meeting to output destinations. More information about track recordings is available in the [Track Recordings Guide Page](https://docs.realtime.cloudflare.com/guides/capabilities/recording/recording-overview).
 */
export const startTrackRecordingForAMeeting = <ThrowOnError extends boolean = false>(options?: Options<StartTrackRecordingForAMeetingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartTrackRecordingForAMeetingResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/recordings/track',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};